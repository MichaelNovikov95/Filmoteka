{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,0JAgBAC,EAAAC,KAAKC,YAAYC,iBAAiB,QAASC,GAC3CJ,EAAAC,KAAKI,UAAUF,iBAAiB,QAASG,EAAAC,yBAEzC,IAAMC,EAAkB,IAAI,EAAAC,EAAAC,UAKtBC,GAAkB,EAAAC,EAAAC,mBAHK,UAGsC,GAC7DC,GAAmB,EAAAF,EAAAC,mBAHM,YAGuC,G,SAMvDE,EAAmBC,G,OAAnBC,EAAkBC,MAAAC,KAAAC,W,SAAlBH,I,OAAAA,EAAfI,EAAAvB,EAAA,CAAAuB,EAAAC,GAAAC,MAAA,SAAAC,EAAkCR,G,IAExBS,EACAC,EACAC,E,2FAFiBC,EAAkBZ,G,OAAnCS,EAAQI,EAAAC,KACRJ,EAAQD,EAASM,KAAI,SAAAC,G,OAAQA,EAAKC,QAClCN,EAAQD,EAAMK,KAAI,SAAAG,G,OAAQA,EAAKC,OAAOJ,KAAI,SAAAK,G,OAASA,EAAMC,IAAM,SAClDX,EAAMK,KACvB,SAACG,EAAMI,G,OAAWJ,EAAKK,UAAYZ,EAAMW,MAE3CtC,EAAAC,KAAKI,UAAUmC,WAAY,EAAAC,EAAAC,YAAWhB,G,kDAEtCiB,QAAQC,IAAIf,EAAAgB,GAAMC,S,2DAVW5B,MAAAC,KAAAC,W,SAclBQ,EAAkBmB,G,OAAlBC,EAAiB9B,MAAAC,KAAAC,W,SAAjB4B,I,OAAAA,EAAf3B,EAAAvB,EAAA,CAAAuB,EAAAC,GAAAC,MAAA,SAAA0B,EAAiCF,G,IACzBG,EAKAC,E,yEALAD,EAAkBH,EAAIhB,IAAG,W,MAACV,EAAAvB,EAAA,CAAAuB,EAAAC,GAAAC,MAAA,SAAAC,EAAMa,G,IAE9Be,E,yEADN5C,EAAgB6B,GAAKA,E,SACE7B,EAAgB6C,iB,cAAjCD,EAAQvB,EAAAC,K,kBACPsB,G,2DAH6Bf,G,gCAAP,I,SAKAiB,QAAQC,IAAIL,G,cAArCC,EAAgBK,EAAA1B,K,kBACfqB,G,2CAPMH,EAAiB9B,MAAAC,KAAAC,WAYhC,SAAShB,EAAUqD,GACa,WAA1BA,EAAMC,OAAOC,WAGmB,YAAhCF,EAAMC,OAAOE,QAAQC,QACvB9C,EAAmBD,GACnBd,EAAAC,KAAK6D,oBAAoBC,UAAUC,IAAI,UACvChE,EAAAC,KAAKgE,kBAAkBF,UAAUG,OAAO,YAExCT,EAAMC,OAAOE,QAAQC,OACrB9C,EAAmBJ,GACnBX,EAAAC,KAAKgE,kBAAkBF,UAAUC,IAAI,UACrChE,EAAAC,KAAK6D,oBAAoBC,UAAUG,OAAO,YA1Cf,IAA3BvD,EAAgBwD,OAClBpD,EAAmBJ,GACdgC,QAAQC,IAAI,YA0BnB5C,EAAAC,KAAKC,YAAYC,iBAAiB,QAASC,GAoIoCE,EAAA8D,SAASjE,iBACtF,SAIF,SAAyBsD,GACnBA,EAAMY,gBAAkBZ,EAAMC,SAChC,EAAApD,EAAAgE,iBAHJC,SAASpE,iBAAiB,WAM1B,SAAoBsD,GACC,WAAfA,EAAMe,OACR,EAAAlE,EAAAgE,iB","sources":["src/script/watched.js"],"sourcesContent":["import { makeMarkup } from './cardMarkup';\nimport { alertNoDataGenresQuery, alertNoDataGenresLocalStrg } from './alerts';\nimport { MovieApi } from './fetchFilms';\nimport {\n  saveOnLocalStorag,\n  getOnLocalStorage,\n  removeOnLocalStorage,\n} from './localStorage';\nimport { refs } from './refs';\nimport { movieCard } from './movieCard';\nimport { closeModal } from './onOpenCard';\nimport { backdrop } from './onOpenCard';\nimport { modal } from './onOpenCard';\nimport { clearCard, onGalleryContainerClick, createMarkup } from './onOpenCard';\nimport { movieCard } from './movieCard';\n\nrefs.btnHeaderEl.addEventListener('click', selectBTN);\nrefs.galleryEl.addEventListener('click', onGalleryContainerClick);\n\nconst libraryMovieApi = new MovieApi();\n\nconst localStorageKeyQueue = 'queue';\nconst localStorageKeyWatched = 'watched';\n\nconst arrIdMovieQueue = getOnLocalStorage(localStorageKeyQueue) || [];\nconst arrIdMovieWathed = getOnLocalStorage(localStorageKeyWatched) || [];\n\nif (arrIdMovieQueue.length !== 0) {\n  startLibraryMarkup(arrIdMovieQueue);\n} else console.log('no queue');\n\nasync function startLibraryMarkup(localStorageBase) {\n  try {\n    const objQueue = await fetchCardsLibrary(localStorageBase);\n    const norm1 = objQueue.map(card => card.data);\n    const norm2 = norm1.map(item => item.genres.map(genre => genre.id || []));\n    const finalcards = norm1.map(\n      (item, index) => (item.genre_ids = norm2[index])\n    );\n    refs.galleryEl.innerHTML = makeMarkup(norm1);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nasync function fetchCardsLibrary(arr) {\n  const arrayOfPromises = arr.map(async id => {\n    libraryMovieApi.id = id;\n    const response = await libraryMovieApi.fetchMovieById();\n    return response;\n  });\n  const cardMovieLibrary = await Promise.all(arrayOfPromises);\n  return cardMovieLibrary;\n}\n\nrefs.btnHeaderEl.addEventListener('click', selectBTN);\n\nfunction selectBTN(event) {\n  if (event.target.nodeName !== 'BUTTON') {\n    return;\n  }\n  if (event.target.dataset.action === 'watched') {\n    startLibraryMarkup(arrIdMovieWathed);\n    refs.btnGelleryWatchedEl.classList.add('active');\n    refs.btnGelleryQueueEl.classList.remove('active');\n  } else {\n    event.target.dataset.action === 'queue';\n    startLibraryMarkup(arrIdMovieQueue);\n    refs.btnGelleryQueueEl.classList.add('active');\n    refs.btnGelleryWatchedEl.classList.remove('active');\n  }\n}\n// elem.classList.add(cls)\n// elem.classList.remove(cls)\n\n// function addToWatched(idMovie) {\n//   const newArrIdMovie = [...getOnLocalStorage(localStorageKeyWatched), idMovie];\n//   saveOnLocalStorag(localStorageKeyWatched, newArrIdMovie);\n// }\n\n// function addToQueue(idMovie) {\n//   const newArrIdMovie = [...getOnLocalStorage(localStorageKeyQueue), idMovie];\n//   saveOnLocalStorag(localStorageKeyQueue, newArrIdMovie);\n// }\n\n// function removeOnWatched(idMovie) {\n//   const newArrIdMovie = [...getOnLocalStorage(localStorageKeyWatched), idMovie];\n//   removeOnLocalStorage;\n// }\n\n// function checkLocalStorageWatched(id) {\n//   const checkStorage = getOnLocalStorage(`watched`) || [];\n//   const idsCheckStorage = checkStorage.map(item => item.id);\n//   if (!idsCheckStorage.includes(id)) {\n//     refs.selectBtn.textContent = `ADD TO WATCHED`;\n//     return;\n//   }\n\n//   selectBtn.textContent = `REMOVE FROM WATCHED`;\n// }\n\n// function checkLocalStorageQueue(id) {\n//   const checkStorage = getOnLocalStorage(`watched`) || [];\n//   const idsCheckStorage = checkStorage.map(item => item.id);\n//   const selectBtn = modal_film.querySelector(`button[data-action=\"queue\"]`);\n\n//   if (!idsCheckStorage.includes(id)) {\n//     selectBtn.textContent = `ADD TO QUEUE`;\n//     return;\n//   }\n\n//   selectBtn.textContent = `REMOVE FROM QUEUE`;\n// }\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// function addRemoveToListBtns(e) {\n//   const checkBtn = e.target.dataset.action;\n//   const movie = JSON.parse(sessionStorage.getItem('currentMovie'));\n\n//   if (checkBtn === 'watched') {\n//     addRemoveFromStorage(movie, checkBtn);\n//     checkQueueStorage(movie);\n//     return;\n//   }\n//   if (checkBtn === 'queue') {\n//     addRemoveFromStorage(movie, checkBtn);\n//     checkWatchedStorage(movie, checkBtn);\n//     return;\n//   }\n//   if (checkBtn === 'closeBackdrop' || modalFilmInfo) {\n//     modalFilmInfo.classList.add('goodby_modal');\n//     modalFilmInfo.innerHTML = '';\n//     return;\n//   }\n// }\n\n// function addRemoveFromStorage(movie, title) {\n//   const moviesWatched = JSON.parse(localStorage.getItem(`${title}`) || '[]');\n//   const selectBtn = modalFilmInfo.querySelector(\n//     `button[data-action=\"${title}\"]`\n//   );\n//   const moviesId = moviesWatched.map(item => item.id);\n\n//   if (!moviesId.includes(movie.id)) {\n//     moviesWatched.push(movie);\n//     localStorage.setItem(`${title}`, JSON.stringify(moviesWatched));\n\n//     selectBtn.textContent = `REMOVE FROM ${title.toUpperCase()}`;\n//     return;\n//   }\n//   const movieIndex = moviesWatched.findIndex(item => item.id === movie.id);\n//   moviesWatched.splice(movieIndex, 1);\n//   localStorage.setItem(`${title}`, JSON.stringify(moviesWatched));\n\n//   selectBtn.textContent = `ADD TO ${title.toUpperCase()}`;\n// }\n\n// function checkWatchedStorage(movie) {\n//   const moviesWatched = JSON.parse(localStorage.getItem(`watched`));\n//   const selectBtn = modalFilmInfo.querySelector(\n//     `button[data-action=\"watched\"]`\n//   );\n\n//   const movieIndex = moviesWatched.findIndex(item => item.id === movie.id);\n\n//   if (movieIndex !== -1) {\n//     moviesWatched.splice(movieIndex, 1);\n//     localStorage.setItem(`watched`, JSON.stringify(moviesWatched));\n\n//     selectBtn.textContent = 'ADD TO WATCHED';\n//   }\n// }\n\n// function checkQueueStorage(movie) {\n//   const moviesQueue = JSON.parse(localStorage.getItem(`queue`));\n//   const selectBtn = modalFilmInfo.querySelector(`button[data-action=\"queue\"]`);\n\n//   const movieIndex = moviesQueue.findIndex(item => item.id === movie.id);\n\n//   if (movieIndex !== -1) {\n//     moviesQueue.splice(movieIndex, 1);\n//     localStorage.setItem(`queue`, JSON.stringify(moviesQueue));\n\n//     selectBtn.textContent = 'ADD TO QUEUE';\n//   }\n// }\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!backdrop.addEventListener(\n  'click',\n  onClickBackdrop\n);\ndocument.addEventListener('keydown', onClickEsc);\nfunction onClickBackdrop(event) {\n  if (event.currentTarget === event.target) {\n    closeModal();\n  }\n}\nfunction onClickEsc(event) {\n  if (event.code === 'Escape') {\n    closeModal();\n  }\n}\n"],"names":["$bpxeT","parcelRequire","$lyT68","refs","btnHeaderEl","addEventListener","$359123cde4e54e6f$var$selectBTN","galleryEl","$1BmHy","onGalleryContainerClick","$359123cde4e54e6f$var$libraryMovieApi","$BRQVA","MovieApi","$359123cde4e54e6f$var$arrIdMovieQueue","$1hEYs","getOnLocalStorage","$359123cde4e54e6f$var$arrIdMovieWathed","$359123cde4e54e6f$var$startLibraryMarkup","localStorageBase","$359123cde4e54e6f$var$_startLibraryMarkup","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","objQueue","norm1","norm2","$359123cde4e54e6f$var$fetchCardsLibrary","_ctx","sent","map","card","data","item","genres","genre","id","index","genre_ids","innerHTML","$lyDIR","makeMarkup","console","log","t0","message","arr","$359123cde4e54e6f$var$_fetchCardsLibrary","_callee1","arrayOfPromises","cardMovieLibrary","response","fetchMovieById","Promise","all","_ctx1","event","target","nodeName","dataset","action","btnGelleryWatchedEl","classList","add","btnGelleryQueueEl","remove","length","backdrop","currentTarget","closeModal","document","code"],"version":3,"file":"library.429f0c5e.js.map"}