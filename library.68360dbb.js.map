{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,gFAUAC,EAAAC,KAAKC,YAAYC,iBAAiB,QAASC,GAE3C,IAAMC,EAAkB,IAAI,EAAAC,EAAAC,WAK5B,EAAAC,EAAAC,mBAF+B,UAEW,QAE1C,IAAMC,EAAkB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QAEnDC,EAAmB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,Q,SAY3CC,EAAmBC,G,OAAnBC,EAAkBC,MAAAC,KAAAC,W,SAAlBH,I,OAAAA,EAAfI,EAAApB,EAAA,CAAAoB,EAAAC,GAAAC,MAAA,SAAAC,EAAkCR,G,IAGxBS,EAEAC,EAEAC,EAEAC,E,kFAPNC,QAAQC,IAAI,U,SACWC,EAAkBf,G,OAAnCS,EAAQO,EAAAC,KACdJ,QAAQC,IAAIL,GACNC,EAAQD,EAASS,KAAI,SAAAC,G,OAAQA,EAAKC,QACxCP,QAAQC,IAAIJ,GACNC,EAAQD,EAAMQ,KAAI,SAAAG,G,OAAQA,EAAKC,OAAOJ,KAAI,SAAAK,G,OAASA,EAAMC,IAAM,SACrEX,QAAQC,IAAIH,GACNC,EAAaF,EAAMQ,KACvB,SAACG,EAAMI,G,OAAWJ,EAAKK,UAAYf,EAAMc,MAE3CZ,QAAQC,IAAIF,GACZzB,EAAAC,KAAKuC,UAAUC,WAAY,EAAAC,EAAAC,YAAWpB,G,kDAEtCG,QAAQC,IAAIE,EAAAe,GAAMC,S,2DAfW9B,MAAAC,KAAAC,W,SAmBlBW,EAAkBkB,G,OAAlBC,EAAiBhC,MAAAC,KAAAC,W,SAAjB8B,I,OAAAA,EAAf7B,EAAApB,EAAA,CAAAoB,EAAAC,GAAAC,MAAA,SAAA4B,EAAiCF,G,IACzBG,EAOAC,E,yEAPAD,EAAkBH,EAAIf,IAAG,W,MAACb,EAAApB,EAAA,CAAAoB,EAAAC,GAAAC,MAAA,SAAAC,EAAMgB,G,IAG9Bc,E,yEAFN9C,EAAgBgC,GAAKA,EACrBX,QAAQC,IAAItB,EAAgBgC,I,SACLhC,EAAgB+C,iB,cAAjCD,EAAQtB,EAAAC,KACdJ,QAAQC,IAAIwB,G,kBACLA,G,2DAL6Bd,G,gCAAP,I,SAOAgB,QAAQC,IAAIL,G,cAArCC,EAAgBK,EAAAzB,K,kBACfoB,G,2CATMH,EAAiBhC,MAAAC,KAAAC,WAchC,SAASb,EAAUoD,GACa,WAA1BA,EAAMC,OAAOC,WAGmB,YAAhCF,EAAMC,OAAOE,QAAQC,QACvBhD,EAAmBD,GACnBX,EAAAC,KAAK4D,oBAAoBC,UAAUC,IAAI,UACvC/D,EAAAC,KAAK+D,kBAAkBF,UAAUG,OAAO,YAExCT,EAAMC,OAAOE,QAAQC,OACrBhD,EAAmBF,GACnBV,EAAAC,KAAK+D,kBAAkBF,UAAUC,IAAI,UACrC/D,EAAAC,KAAK4D,oBAAoBC,UAAUG,OAAO,YAtD9CvC,QAAQC,IAAIjB,GACZgB,QAAQC,IAAI3B,EAAAC,KAAKiE,oBAEjBxC,QAAQC,IAAI3B,EAAAC,KAAKuC,WAEc,IAA3B9B,EAAgByD,OAClBvD,EAAmBF,GACdgB,QAAQC,IAAI,YAiCnB3B,EAAAC,KAAKC,YAAYC,iBAAiB,QAASC,G","sources":["src/script/watched.js"],"sourcesContent":["import { makeMarkup } from './cardMarkup';\nimport { alertNoDataGenresQuery, alertNoDataGenresLocalStrg } from './alerts';\nimport { MovieApi } from './fetchFilms';\nimport {\n  saveOnLocalStorag,\n  getOnLocalStorage,\n  removeOnLocalStorage,\n} from './localStorage';\nimport { refs } from './refs';\n\nrefs.btnHeaderEl.addEventListener('click', selectBTN);\n\nconst libraryMovieApi = new MovieApi();\n\nconst localStorageKeyQueue = 'queue';\nconst localStorageKeyWatched = 'watched';\n\nsaveOnLocalStorag(localStorageKeyWatched, 453395);\n\nconst arrIdMovieQueue = [725201, 453395, 756999, 718789, 438148];\n// const arrIdMovieQueue = getOnLocalStorage(localStorageKeyQueue) || [];\nconst arrIdMovieWathed = [861072, 545611, 639933, 414906, 361743];\n// const arrIdMovieWathed = getOnLocalStorage(localStorageKeyWatched) || [];\n\nconsole.log(arrIdMovieQueue);\nconsole.log(refs.refLibreryHeaderEl);\n\nconsole.log(refs.galleryEl);\n\nif (arrIdMovieQueue.length !== 0) {\n  startLibraryMarkup(arrIdMovieQueue);\n} else console.log('no queue');\n\nasync function startLibraryMarkup(localStorageBase) {\n  try {\n    console.log('start1');\n    const objQueue = await fetchCardsLibrary(localStorageBase);\n    console.log(objQueue);\n    const norm1 = objQueue.map(card => card.data);\n    console.log(norm1);\n    const norm2 = norm1.map(item => item.genres.map(genre => genre.id || []));\n    console.log(norm2);\n    const finalcards = norm1.map(\n      (item, index) => (item.genre_ids = norm2[index])\n    );\n    console.log(finalcards);\n    refs.galleryEl.innerHTML = makeMarkup(norm1);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nasync function fetchCardsLibrary(arr) {\n  const arrayOfPromises = arr.map(async id => {\n    libraryMovieApi.id = id;\n    console.log(libraryMovieApi.id);\n    const response = await libraryMovieApi.fetchMovieById();\n    console.log(response);\n    return response;\n  });\n  const cardMovieLibrary = await Promise.all(arrayOfPromises);\n  return cardMovieLibrary;\n}\n\nrefs.btnHeaderEl.addEventListener('click', selectBTN);\n\nfunction selectBTN(event) {\n  if (event.target.nodeName !== 'BUTTON') {\n    return;\n  }\n  if (event.target.dataset.action === 'watched') {\n    startLibraryMarkup(arrIdMovieWathed);\n    refs.btnGelleryWatchedEl.classList.add('active');\n    refs.btnGelleryQueueEl.classList.remove('active');\n  } else {\n    event.target.dataset.action === 'queue';\n    startLibraryMarkup(arrIdMovieQueue);\n    refs.btnGelleryQueueEl.classList.add('active');\n    refs.btnGelleryWatchedEl.classList.remove('active');\n  }\n}\n// elem.classList.add(cls)\n// elem.classList.remove(cls)\n\n// function addToWatched(idMovie) {\n//   const newArrIdMovie = [...getOnLocalStorage(localStorageKeyWatched), idMovie];\n//   saveOnLocalStorag(localStorageKeyWatched, newArrIdMovie);\n// }\n\n// function addToQueue(idMovie) {\n//   const newArrIdMovie = [...getOnLocalStorage(localStorageKeyQueue), idMovie];\n//   saveOnLocalStorag(localStorageKeyQueue, newArrIdMovie);\n// }\n\n// function removeOnWatched(idMovie) {\n//   const newArrIdMovie = [...getOnLocalStorage(localStorageKeyWatched), idMovie];\n//   removeOnLocalStorage;\n// }\n\n// function checkLocalStorageWatched(id) {\n//   const checkStorage = getOnLocalStorage(`watched`) || [];\n//   const idsCheckStorage = checkStorage.map(item => item.id);\n//   if (!idsCheckStorage.includes(id)) {\n//     refs.selectBtn.textContent = `ADD TO WATCHED`;\n//     return;\n//   }\n\n//   selectBtn.textContent = `REMOVE FROM WATCHED`;\n// }\n\n// function checkLocalStorageQueue(id) {\n//   const checkStorage = getOnLocalStorage(`watched`) || [];\n//   const idsCheckStorage = checkStorage.map(item => item.id);\n//   const selectBtn = modal_film.querySelector(`button[data-action=\"queue\"]`);\n\n//   if (!idsCheckStorage.includes(id)) {\n//     selectBtn.textContent = `ADD TO QUEUE`;\n//     return;\n//   }\n\n//   selectBtn.textContent = `REMOVE FROM QUEUE`;\n// }\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// function addRemoveToListBtns(e) {\n//   const checkBtn = e.target.dataset.action;\n//   const movie = JSON.parse(sessionStorage.getItem('currentMovie'));\n\n//   if (checkBtn === 'watched') {\n//     addRemoveFromStorage(movie, checkBtn);\n//     checkQueueStorage(movie);\n//     return;\n//   }\n//   if (checkBtn === 'queue') {\n//     addRemoveFromStorage(movie, checkBtn);\n//     checkWatchedStorage(movie, checkBtn);\n//     return;\n//   }\n//   if (checkBtn === 'closeBackdrop' || modalFilmInfo) {\n//     modalFilmInfo.classList.add('goodby_modal');\n//     modalFilmInfo.innerHTML = '';\n//     return;\n//   }\n// }\n\n// function addRemoveFromStorage(movie, title) {\n//   const moviesWatched = JSON.parse(localStorage.getItem(`${title}`) || '[]');\n//   const selectBtn = modalFilmInfo.querySelector(\n//     `button[data-action=\"${title}\"]`\n//   );\n//   const moviesId = moviesWatched.map(item => item.id);\n\n//   if (!moviesId.includes(movie.id)) {\n//     moviesWatched.push(movie);\n//     localStorage.setItem(`${title}`, JSON.stringify(moviesWatched));\n\n//     selectBtn.textContent = `REMOVE FROM ${title.toUpperCase()}`;\n//     return;\n//   }\n//   const movieIndex = moviesWatched.findIndex(item => item.id === movie.id);\n//   moviesWatched.splice(movieIndex, 1);\n//   localStorage.setItem(`${title}`, JSON.stringify(moviesWatched));\n\n//   selectBtn.textContent = `ADD TO ${title.toUpperCase()}`;\n// }\n\n// function checkWatchedStorage(movie) {\n//   const moviesWatched = JSON.parse(localStorage.getItem(`watched`));\n//   const selectBtn = modalFilmInfo.querySelector(\n//     `button[data-action=\"watched\"]`\n//   );\n\n//   const movieIndex = moviesWatched.findIndex(item => item.id === movie.id);\n\n//   if (movieIndex !== -1) {\n//     moviesWatched.splice(movieIndex, 1);\n//     localStorage.setItem(`watched`, JSON.stringify(moviesWatched));\n\n//     selectBtn.textContent = 'ADD TO WATCHED';\n//   }\n// }\n\n// function checkQueueStorage(movie) {\n//   const moviesQueue = JSON.parse(localStorage.getItem(`queue`));\n//   const selectBtn = modalFilmInfo.querySelector(`button[data-action=\"queue\"]`);\n\n//   const movieIndex = moviesQueue.findIndex(item => item.id === movie.id);\n\n//   if (movieIndex !== -1) {\n//     moviesQueue.splice(movieIndex, 1);\n//     localStorage.setItem(`queue`, JSON.stringify(moviesQueue));\n\n//     selectBtn.textContent = 'ADD TO QUEUE';\n//   }\n// }\n"],"names":["$bpxeT","parcelRequire","$lyT68","refs","btnHeaderEl","addEventListener","$359123cde4e54e6f$var$selectBTN","$359123cde4e54e6f$var$libraryMovieApi","$BRQVA","MovieApi","$1hEYs","saveOnLocalStorag","$359123cde4e54e6f$var$arrIdMovieQueue","$359123cde4e54e6f$var$arrIdMovieWathed","$359123cde4e54e6f$var$startLibraryMarkup","localStorageBase","$359123cde4e54e6f$var$_startLibraryMarkup","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","objQueue","norm1","norm2","finalcards","console","log","$359123cde4e54e6f$var$fetchCardsLibrary","_ctx","sent","map","card","data","item","genres","genre","id","index","genre_ids","galleryEl","innerHTML","$lyDIR","makeMarkup","t0","message","arr","$359123cde4e54e6f$var$_fetchCardsLibrary","_callee1","arrayOfPromises","cardMovieLibrary","response","fetchMovieById","Promise","all","_ctx1","event","target","nodeName","dataset","action","btnGelleryWatchedEl","classList","add","btnGelleryQueueEl","remove","refLibreryHeaderEl","length"],"version":3,"file":"library.68360dbb.js.map"}